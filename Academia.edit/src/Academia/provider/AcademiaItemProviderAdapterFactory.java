/**
 */
package Academia.provider;

import Academia.util.AcademiaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AcademiaItemProviderAdapterFactory extends AcademiaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AcademiaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.APackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APackageItemProvider aPackageItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.APackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPackageAdapter() {
		if (aPackageItemProvider == null) {
			aPackageItemProvider = new APackageItemProvider(this);
		}

		return aPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.AApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AApplicationItemProvider aApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.AApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAApplicationAdapter() {
		if (aApplicationItemProvider == null) {
			aApplicationItemProvider = new AApplicationItemProvider(this);
		}

		return aApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.AObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AObjectItemProvider aObjectItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.AObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAObjectAdapter() {
		if (aObjectItemProvider == null) {
			aObjectItemProvider = new AObjectItemProvider(this);
		}

		return aObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.AVariation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AVariationItemProvider aVariationItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.AVariation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAVariationAdapter() {
		if (aVariationItemProvider == null) {
			aVariationItemProvider = new AVariationItemProvider(this);
		}

		return aVariationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.AAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AAttributeItemProvider aAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.AAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAAttributeAdapter() {
		if (aAttributeItemProvider == null) {
			aAttributeItemProvider = new AAttributeItemProvider(this);
		}

		return aAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.AOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AOperationItemProvider aOperationItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.AOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAOperationAdapter() {
		if (aOperationItemProvider == null) {
			aOperationItemProvider = new AOperationItemProvider(this);
		}

		return aOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.AParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AParameterItemProvider aParameterItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.AParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAParameterAdapter() {
		if (aParameterItemProvider == null) {
			aParameterItemProvider = new AParameterItemProvider(this);
		}

		return aParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.Matricula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatriculaItemProvider matriculaItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.Matricula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatriculaAdapter() {
		if (matriculaItemProvider == null) {
			matriculaItemProvider = new MatriculaItemProvider(this);
		}

		return matriculaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.Aluno} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlunoItemProvider alunoItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.Aluno}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlunoAdapter() {
		if (alunoItemProvider == null) {
			alunoItemProvider = new AlunoItemProvider(this);
		}

		return alunoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.Curso} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CursoItemProvider cursoItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.Curso}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCursoAdapter() {
		if (cursoItemProvider == null) {
			cursoItemProvider = new CursoItemProvider(this);
		}

		return cursoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.Departamento} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DepartamentoItemProvider departamentoItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.Departamento}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDepartamentoAdapter() {
		if (departamentoItemProvider == null) {
			departamentoItemProvider = new DepartamentoItemProvider(this);
		}

		return departamentoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.Campus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CampusItemProvider campusItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.Campus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCampusAdapter() {
		if (campusItemProvider == null) {
			campusItemProvider = new CampusItemProvider(this);
		}

		return campusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.DisciplinaSemestre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisciplinaSemestreItemProvider disciplinaSemestreItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.DisciplinaSemestre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisciplinaSemestreAdapter() {
		if (disciplinaSemestreItemProvider == null) {
			disciplinaSemestreItemProvider = new DisciplinaSemestreItemProvider(this);
		}

		return disciplinaSemestreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.DisciplinaPaga} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisciplinaPagaItemProvider disciplinaPagaItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.DisciplinaPaga}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisciplinaPagaAdapter() {
		if (disciplinaPagaItemProvider == null) {
			disciplinaPagaItemProvider = new DisciplinaPagaItemProvider(this);
		}

		return disciplinaPagaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Academia.DisciplinaGratis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisciplinaGratisItemProvider disciplinaGratisItemProvider;

	/**
	 * This creates an adapter for a {@link Academia.DisciplinaGratis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisciplinaGratisAdapter() {
		if (disciplinaGratisItemProvider == null) {
			disciplinaGratisItemProvider = new DisciplinaGratisItemProvider(this);
		}

		return disciplinaGratisItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aPackageItemProvider != null) aPackageItemProvider.dispose();
		if (aApplicationItemProvider != null) aApplicationItemProvider.dispose();
		if (aObjectItemProvider != null) aObjectItemProvider.dispose();
		if (aVariationItemProvider != null) aVariationItemProvider.dispose();
		if (aAttributeItemProvider != null) aAttributeItemProvider.dispose();
		if (aOperationItemProvider != null) aOperationItemProvider.dispose();
		if (aParameterItemProvider != null) aParameterItemProvider.dispose();
		if (matriculaItemProvider != null) matriculaItemProvider.dispose();
		if (alunoItemProvider != null) alunoItemProvider.dispose();
		if (cursoItemProvider != null) cursoItemProvider.dispose();
		if (departamentoItemProvider != null) departamentoItemProvider.dispose();
		if (campusItemProvider != null) campusItemProvider.dispose();
		if (disciplinaSemestreItemProvider != null) disciplinaSemestreItemProvider.dispose();
		if (disciplinaPagaItemProvider != null) disciplinaPagaItemProvider.dispose();
		if (disciplinaGratisItemProvider != null) disciplinaGratisItemProvider.dispose();
	}

}
